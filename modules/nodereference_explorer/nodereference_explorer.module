<?php
// $Id: nodereference_explorer.module,v 1.1 2009/02/03 13:55:02 gnindl Exp $

define('NODE_REFERENCE_EXPLORER_MODULE_NAME', 'nodereference_explorer');
define('NODE_REFERENCE_EXPLORER_MODULE_PATH', drupal_get_path('module', NODE_REFERENCE_EXPLORER_MODULE_NAME));
define('NODE_REFERENCE_SERVICE_NODE_DATA', 'nodereference_explorer/service_node_data');
/**
 * Implementation of hook_init()
 * 
 * Some start up/boot work is done here when the module is
 * loaded. Actually necessary header files (inc), js and css files are loaded here.
 */
function nodereference_explorer_init() {
	
	//service headers for server-side drupal communication for js widgets
	module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, NODE_REFERENCE_EXPLORER_MODULE_NAME.'_service');
	
	//thumbnail generation for images
	module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, NODE_REFERENCE_EXPLORER_MODULE_NAME.'_thumbnail');
		
	//widget 
	module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME,NODE_REFERENCE_EXPLORER_MODULE_NAME.'_widget');
	
	//js libs for draggable and resizable dialog widget
	$files = array('ui.dialog', 'ui.draggable', 'ui.resizable');
	jquery_ui_add($files);
	
	//css for for dialog widget
	drupal_add_css(NODE_REFERENCE_EXPLORER_MODULE_PATH .'/dialog/flora.all.css');
	drupal_add_css(NODE_REFERENCE_EXPLORER_MODULE_PATH.'/dialog/flora.dialog.css');
	drupal_add_css(NODE_REFERENCE_EXPLORER_MODULE_PATH.'/dialog/flora.resizable.css');
	
	//css for thickbox popup
	drupal_add_css(NODE_REFERENCE_EXPLORER_MODULE_PATH . '/thickbox/thickbox.css');
	
	//client side caching, e. g. needed for node item selection
	drupal_add_js(NODE_REFERENCE_EXPLORER_MODULE_PATH . '/cache/aqCookie.js'); 
	
	//js lib for thickbox popup
	drupal_add_js(NODE_REFERENCE_EXPLORER_MODULE_PATH . '/thickbox/thickbox.js'); 

}

/**
 * Definition of external entry points to the module
 * The item urls (keys) are delegated to the page call backs
 * @return array of menu items
 */
function nodereference_explorer_menu() {
	
	//retrieve nodes allowed for this field
  $items['nodereference_explorer/service_node_data'] = array(
    'page callback' => 'nodereference_explorer_service_node_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  //get all taxonomy terms
  $items['nodereference_explorer/service_taxonomy'] = array(
    'page callback' => 'nodereference_explorer_service_taxonomy',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  //get all nodes which are related to a certain term
  $items['nodereference_explorer/service_get_related_nodes_of_term'] = array(
    'page callback' => 'nodereference_explorer_service_get_related_nodes_of_term',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['nodereference_explorer/service_domain_name'] = array(
    'page callback' => 'nodereference_explorer_service_domain_name',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Define the information for the formatters here which can be choosen
 * from the display field teasers. The key of the returning array is
 * further processed in the {module}_theme() hook.
 * @return array of field formatters definitions
 */
function nodereference_explorer_field_formatter_info() {
  return array(
    'teaser_content_only' => array(
      'label' => t('Teaser (content only)'),
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Definition of themes for the field.
 * The key of the array is named as followed: {module}_formatter_{formatter key}
 * The formatter key is the key of the array in {module}_field_formatter_info().
 * @return array of themes and called theming function
 */
function nodereference_explorer_theme() {
  return array(
    'nodereference_explorer_formatter_teaser_content_only' => array(
      'arguments' => array('element'),
  	  'function' => 'theme_nodereference_explorer_formatter_teaser_content_only',
    ),
  );
}

/**
 * Theming functions which themes the referencing node by its attached 
 * teasers and strips off header information and adds a thickbox popup.
 * @param $element
 * 	 form api widget
 * @return 
 * 	 html code of the stripped teaser
 */
function theme_nodereference_explorer_formatter_teaser_content_only($element) {
	
	//call normal teaser theme function
	$output = theme_nodereference_formatter_full_teaser($element);
	//return $output;
	
	//end of header
	$header_delimit_end = strpos($output, 'class="node clear-block">'); //+ 25;
	
	//start of content
	$content_delimit_start = strpos($output, '<div class="content">');
	
	//get content
	$content = substr($output, 0, $header_delimit_end);
	$content .= '>';
	$content .= substr($output, $content_delimit_start);
	
	//add thickbox if it is an image
	$c1 = str_replace("imagecache ",
				"thickbox ", $content);
	
	//hide field label
	$c2 = str_replace('class="field-label"', 'style="display:none"', $c1);
	return $c2;
}